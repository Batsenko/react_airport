{"version":3,"sources":["FlightItem.js","AirlineTable.js","ObjectSelectorItem.js","TimeSelector.js","App.js","serviceWorker.js","index.js"],"names":["FlightItem","_ref","data","react_default","a","createElement","className","term","Date","timeDepShedule","timeArrShedule","toTimeString","slice","status","codeShareData","map","value","class","src","airline","en","logoSmallName","alt","name","codeShare","src_AirlineTable","flightList","src_ObjectSelectorItem","changeObject","flightObjects","state","objects","index","href","key","flightObject","onClick","bind","src_TimeSelector","changeDate","dayOffset","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateData","date","dd","getDate","mm","getMonth","yyyy","getFullYear","concat","_this2","now","setTime","getTime","fetch","formatDate","then","json","setState","body","object","isEmpty","React","Component","prototype","hasOwnProperty","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.357a2b8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './flight-item.scss';\r\n\r\nexport default ({ data }) => {\r\n    return <tr className=\"flight-item\">\r\n        <td className=\"flight-item__terminal\">{data.term}</td>\r\n        <td className=\"flight-item__localTime\">{new Date(data.timeDepShedule ? data.timeDepShedule : data.timeArrShedule).toTimeString().slice(0, 5)}</td>\r\n        <td className=\"flight-item__destination\">{data[\"airportToID.name_en\"] ? data[\"airportToID.name_en\"] : data[\"airportFromID.city_en\"]}</td>\r\n        <td className=\"flight-item__status\">{data.status}</td>\r\n        <td className=\"flight-item__airline-list\">\r\n            {data.codeShareData.map((value) => {\r\n                return (<div class=\"flight-item__airline-list-airline\">\r\n                    <img className=\"flight-item__airline-list-airline-logo\" src={value.airline.en.logoSmallName} alt=\"logo\"></img>\r\n                    {value.airline.en.name}\r\n                </div>)\r\n            })}\r\n        </td>\r\n        <td className=\"flight-item__flight-field\">{data.codeShareData[0].codeShare}</td>\r\n    </tr>\r\n};","import React from \"react\";\r\nimport FlightItem from \"./FlightItem.js\"\r\nimport './AirlineTable.scss';\r\n\r\nexport default ({ data }) => {\r\n  let flightList = data.map((value) => {\r\n    return <FlightItem data={value} />\r\n    });\r\n\r\n  return <div className=\"data-table\">\r\n    <table>\r\n      <tr>\r\n        <th>Terminal</th>\r\n        <th>Local time</th>\r\n        <th>Destination</th>\r\n        <th>Status</th>\r\n        <th>Airline</th>\r\n        <th>Flight</th>\r\n      </tr>\r\n\r\n      {flightList}\r\n    </table>\r\n   </div>\r\n};\r\n","import React from 'react';\r\nimport './ObjectSelectorItem.scss';\r\n\r\nexport default ({ changeObject, flightObjects, state }) => {\r\n  let objects = flightObjects.map((value, index) => {\r\n    return <a href=\"#\" className={\"change-object\" + (value.key === state.flightObject ? \" active\" : \"\")}\r\n      onClick={changeObject.bind(null, value.key)}> {value.name} </a>\r\n  });\r\n\r\n  return (\r\n    <div class=\"object-selector-list\">\r\n      {objects}\r\n    </div>);\r\n} ","import React from 'react';\r\nimport './TimeSelector.scss';\r\n\r\nexport default ({ changeDate, dayOffset }) => {\r\n  return (\r\n    <div className=\"time-selectors\">\r\n      <a href=\"#\" className={\"time-selector__day\" + (dayOffset === -1 ? \" active\" : \"\")} onClick={changeDate.bind(null, -1)}>Yesterday</a>\r\n      <a href=\"#\" className={\"time-selector__day\" + (dayOffset === 0 ? \" active\" : \"\")} onClick={changeDate.bind(null, 0)}>Today</a>\r\n      <a href=\"#\" className={\"time-selector__day\" + (dayOffset === 1 ? \" active\" : \"\")} onClick={changeDate.bind(null, 1)}>Tomorrow</a>\r\n    </div>);\r\n}\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport AirlineTable from './AirlineTable';\r\nimport ObjectSelectorItem from './ObjectSelectorItem';\r\nimport TimeSelector from './TimeSelector';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.flightObjects =\r\n      [{\r\n        key: \"departure\",\r\n        name: \"Departures\"\r\n      }, {\r\n        key: \"arrival\",\r\n        name: \"Arrivals\"\r\n      }];\r\n\r\n    this.state = {\r\n      dayOffset: 0,\r\n      flightObject: this.flightObjects[0].key,\r\n      data: {}\r\n    }\r\n\r\n    this.updateData(0);\r\n  }\r\n\r\n  formatDate(date) {\r\n    let dd = date.getDate() + 1;\r\n    let mm = date.getMonth() + 1;\r\n    let yyyy = date.getFullYear();\r\n    if (dd < 10) {\r\n      dd = '0' + dd;\r\n    }\r\n    if (mm < 10) {\r\n      mm = '0' + mm;\r\n    }\r\n    return `${dd}-${mm}-${yyyy}`;\r\n  }\r\n\r\n  updateData(dayOffset) {\r\n    let date = new Date(Date.now());\r\n    date.setTime(date.getTime() + dayOffset * (60 * 60 * 24 * 1000));\r\n\r\n    return fetch(`https://api.iev.aero/api/flights/${this.formatDate(date)}`).then(data => data.json()).then(data => this.setState({\r\n      data: data.body,\r\n      dayOffset\r\n    }));\r\n  }\r\n\r\n  changeObject(object) {\r\n    this.setState({\r\n      flightObject: object\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <ObjectSelectorItem changeObject={this.changeObject.bind(this)} flightObjects={this.flightObjects} state={this.state} />\r\n        <TimeSelector changeDate={this.updateData.bind(this)} dayOffset={this.state.dayOffset} />\r\n        {!this.state.data.isEmpty() ? <AirlineTable data={this.state.data[this.state.flightObject]} /> : null}\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nObject.prototype.isEmpty = function () {\r\n  for (let key in this) {\r\n    if (this.hasOwnProperty(key))\r\n      return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}